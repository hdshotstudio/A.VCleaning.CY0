
# db.py
import aiosqlite
from typing import Optional, List, Dict

DB_FILE = "bookings.db"

CREATE_BOOKINGS = \"\"\"
CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    username TEXT,
    service TEXT NOT NULL,
    date TEXT NOT NULL,        -- ISO date YYYY-MM-DD
    address TEXT,
    phone TEXT,
    status TEXT DEFAULT 'pending', -- pending / accepted / cancelled / done
    created_at TEXT DEFAULT (datetime('now'))
);
\"\"\"

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(CREATE_BOOKINGS)
        await db.commit()

async def add_booking(booking: Dict) -> int:
    query = \"\"\"
    INSERT INTO bookings (user_id, username, service, date, address, phone)
    VALUES (?, ?, ?, ?, ?, ?)
    \"\"\"
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(query, (
            booking['user_id'],
            booking.get('username'),
            booking['service'],
            booking['date'],
            booking.get('address'),
            booking.get('phone'),
        ))
        await db.commit()
        return cur.lastrowid

async def get_booking(booking_id: int) -> Optional[Dict]:
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute("SELECT * FROM bookings WHERE id = ?", (booking_id,))
        row = await cur.fetchone()
        if not row:
            return None
        cols = [c[0] for c in cur.description]
        return dict(zip(cols, row))

async def list_bookings(status: Optional[str] = None) -> List[Dict]:
    async with aiosqlite.connect(DB_FILE) as db:
        if status:
            cur = await db.execute("SELECT * FROM bookings WHERE status = ? ORDER BY created_at DESC", (status,))
        else:
            cur = await db.execute("SELECT * FROM bookings ORDER BY created_at DESC")
        rows = await cur.fetchall()
        cols = [c[0] for c in cur.description]
        return [dict(zip(cols, r)) for r in rows]

async def update_status(booking_id: int, status: str):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE bookings SET status = ? WHERE id = ?", (status, booking_id))
        await db.commit()

async def user_bookings(user_id: int) -> List[Dict]:
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute("SELECT * FROM bookings WHERE user_id = ? ORDER BY created_at DESC", (user_id,))
        rows = await cur.fetchall()
        cols = [c[0] for c in cur.description]
        return [dict(zip(cols, r)) for r in rows]

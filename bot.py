
# bot.py ‚Äî AV Cleaning CY (Design v2, no time selection)
import logging
from datetime import datetime, timedelta
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ConversationHandler
)
import db

# ========== CONFIG ==========
BOT_TOKEN = "PUT_YOUR_BOT_TOKEN_HERE"  # ‚Üê –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω BotFather
ADMIN_IDS = [5570877977, 1214168275]   # –¥–≤–æ–π–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞
COMPANY_NAME = "AV Cleaning CY"
INSTAGRAM_URL = "https://www.instagram.com/a.vcleaning.cy/"
CONTACT_USERNAME = "adrian_handsome"
SIGNATURE = "üíé AV Cleaning CY ‚Äî —á–∏—Å—Ç–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å"
LOGO_PATH = "assets/logo.jpg"
# ============================

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Conversation states
(SERVICE, DATE, ADDRESS, PHONE, CONFIRM) = range(5)

SERVICES = [
    ("üè† –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", "–ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π, —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–æ–Ω—ã."),
    ("üßπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞", "–ë—ã—Å—Ç—Ä–∞—è —É–±–æ—Ä–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ–∂–µ—Å—Ç–∏ –∏ —É—é—Ç–∞."),
    ("üè¢ –£–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞", "–ß–∏—Å—Ç–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤."),
    ("ü™£ –ü–æ—Å–ª–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", "–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é –ø—ã–ª—å –∏ —Å–ª–µ–¥—ã —Ä–µ–º–æ–Ω—Ç–∞.")
]

def gen_dates(days=14):
    base = datetime.now().date()
    return [(base + timedelta(days=i)).isoformat() for i in range(0, days)]

def booking_text(b: dict) -> str:
    user = b.get('username') or str(b['user_id'])
    if isinstance(user, str) and user and not user.startswith("@"):
        user = f"@{user}"
    lines = [
        "üíé –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        f"üë§ –ò–º—è: {user}",
        f"üßΩ –£—Å–ª—É–≥–∞: {b['service']}",
        f"üìÖ –î–∞—Ç–∞: {b['date']}",
        f"üìç –ê–¥—Ä–µ—Å: {b.get('address')}",
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {b.get('phone')}",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        SIGNATURE
    ]
    return "\n".join(lines)

def booking_text_compact(b: dict) -> str:
    return (f"üßæ –ó–∞–ø–∏—Å—å #{b['id']}\n"
            f"–£—Å–ª—É–≥–∞: {b['service']}\n"
            f"–î–∞—Ç–∞: {b['date']}\n"
            f"–ê–¥—Ä–µ—Å: {b.get('address')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {b.get('phone')}\n"
            f"–°—Ç–∞—Ç—É—Å: {b.get('status')}\n\n{SIGNATURE}")

def main_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßΩ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–±–æ—Ä–∫—É", callback_data="book")],
        [InlineKeyboardButton("üß∫ –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{CONTACT_USERNAME}")],
        [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_URL)]
    ])

def services_menu_kb():
    rows = []
    for i, (title, _desc) in enumerate(SERVICES):
        rows.append([InlineKeyboardButton(title, callback_data=f"svcinfo|{i}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")])
    return InlineKeyboardMarkup(rows)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Try send logo
    try:
        with open(LOGO_PATH, "rb") as f:
            await (update.message.reply_photo if update.message else update.callback_query.message.reply_photo)(
                photo=f,
                caption=(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>AV Cleaning CY</b>\n"
                    "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–Ω–∏–Ω–≥ –Ω–∞ –ö–∏–ø—Ä–µ üèù\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"
                ),
                parse_mode="HTML",
                reply_markup=main_menu_kb()
            )
            return
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø: %s", e)
    # Fallback text
    target = update.message or update.callback_query.message
    await target.reply_html(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>AV Cleaning CY</b>\n"
        "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–Ω–∏–Ω–≥ –Ω–∞ –ö–∏–ø—Ä–µ üèù\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_menu_kb()
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –º–µ–Ω—é\n"
        "/book ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/mybookings ‚Äî –º–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "/bookings ‚Äî –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–∞–¥–º–∏–Ω)\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.edit_reply_markup(reply_markup=main_menu_kb())

async def show_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    text = "üß∫ <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏</b>\n\n" + "\n\n".join([
        f"{title}\n‚Äî {desc}" for title, desc in SERVICES
    ])
    await update.callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=services_menu_kb())

async def service_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, idx = update.callback_query.data.split("|")
    idx = int(idx)
    title, desc = SERVICES[idx]
    text = f"{title}\n\n{desc}\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É."
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üßΩ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="services")]
    ])
    await update.callback_query.message.edit_text(text, reply_markup=kb)

# Booking flow
async def book_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        send = update.callback_query.message
    else:
        send = update.message
    kb = [[InlineKeyboardButton(title, callback_data=f"service|{i}")] for i,(title,_d) in enumerate(SERVICES)]
    await send.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=InlineKeyboardMarkup(kb))
    return SERVICE

async def service_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, idx = update.callback_query.data.split("|")
    idx = int(idx)
    context.user_data['service'] = SERVICES[idx][0]

    dates = gen_dates(14)
    kb, row = [], []
    for d in dates:
        row.append(InlineKeyboardButton(d, callback_data=f"date|{d}"))
        if len(row) == 3:
            kb.append(row); row = []
    if row: kb.append(row)
    await update.callback_query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å—É–µ–º –≤—Ä—É—á–Ω—É—é):", reply_markup=InlineKeyboardMarkup(kb))
    return DATE

async def date_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, date = update.callback_query.data.split("|")
    context.user_data['date'] = date
    await update.callback_query.message.reply_text("üìç –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, —ç—Ç–∞–∂/–∫–≤):")
    return ADDRESS

async def address_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text.strip()
    kb = ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
                              ["–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é"]],
                             resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("‚òéÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
    return PHONE

async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()
    context.user_data['phone'] = phone

    summary = (f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
               f"{context.user_data['service']}\n"
               f"üìÖ {context.user_data['date']}\n"
               f"üìç {context.user_data['address']}\n"
               f"‚òéÔ∏è {context.user_data['phone']}\n\n{SIGNATURE}")
    kb = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm|yes"),
           InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm|no")]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(kb))
    return CONFIRM

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, choice = update.callback_query.data.split("|")
    if choice == "no":
        await update.callback_query.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book")
        return ConversationHandler.END

    booking = {
        'user_id': update.effective_user.id,
        'username': update.effective_user.username or update.effective_user.full_name,
        'service': context.user_data['service'],
        'date': context.user_data['date'],
        'address': context.user_data['address'],
        'phone': context.user_data['phone'],
    }
    bid = await db.add_booking(booking)
    await update.callback_query.message.reply_text(
        f"‚úÖ –ì–æ—Ç–æ–≤–æ ‚Äî –≤–∞—à–∞ –∑–∞–ø–∏—Å—å #{bid} —Å–æ–∑–¥–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n\n{SIGNATURE}"
    )

    b = await db.get_booking(bid)
    text = booking_text(b)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"admin|accept|{bid}"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin|cancel|{bid}")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"admin|contact|{bid}")]
    ])
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(admin_id, text, reply_markup=kb)
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: %s", e)

    return ConversationHandler.END

# Admin actions
async def admin_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, action, bid = update.callback_query.data.split("|")
    bid = int(bid)

    if action == "accept":
        await db.update_status(bid, "accepted")
        b = await db.get_booking(bid)
        await update.callback_query.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n" + booking_text_compact(b))
        try:
            await context.bot.send_message(b['user_id'], f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{bid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—Ä–µ–º—è —Å–æ–≥–ª–∞—Å—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n{SIGNATURE}")
        except Exception:
            pass

    elif action == "cancel":
        await db.update_status(bid, "cancelled")
        b = await db.get_booking(bid)
        await update.callback_query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n" + booking_text_compact(b))
        try:
            await context.bot.send_message(b['user_id'], f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{bid} –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book\n\n{SIGNATURE}")
        except Exception:
            pass

    elif action == "contact":
        b = await db.get_booking(bid)
        await update.callback_query.message.reply_text(
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞\nüë§ @{b.get('username')}\n‚òéÔ∏è {b.get('phone')}\n\n{SIGNATURE}"
        )

# Lists
async def mybookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    rows = await db.user_bookings(user_id)
    if not rows:
        await update.effective_message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n\n" + SIGNATURE)
        return
    for r in rows:
        await update.effective_message.reply_text(booking_text_compact(r))

async def admin_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    rows = await db.list_bookings()
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    for r in rows:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"admin|accept|{r['id']}"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin|cancel|{r['id']}")]
        ])
        await update.message.reply_text(booking_text_compact(r), reply_markup=kb)

async def cancel_conv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
    return ConversationHandler.END

def main():
    import asyncio
    asyncio.run(db.init_db())

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler('book', book_start), CallbackQueryHandler(book_start, pattern="^book$")],
        states={
            SERVICE: [CallbackQueryHandler(service_chosen, pattern="^service\|")],
            DATE: [CallbackQueryHandler(date_chosen, pattern="^date\|")],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address_received)],
            PHONE: [MessageHandler((filters.CONTACT | filters.TEXT) & ~filters.COMMAND, phone_received)],
            CONFIRM: [CallbackQueryHandler(confirm_booking, pattern="^confirm\|")]
        },
        fallbacks=[CommandHandler('cancel', cancel_conv)]
    )

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(show_menu, pattern="^menu$"))
    app.add_handler(CallbackQueryHandler(show_services, pattern="^services$"))
    app.add_handler(CallbackQueryHandler(service_info, pattern="^svcinfo\|"))
    app.add_handler(CommandHandler('help', help_cmd))
    app.add_handler(CommandHandler('mybookings', mybookings))
    app.add_handler(CommandHandler('bookings', admin_list))
    app.add_handler(CallbackQueryHandler(admin_button, pattern="^admin\|"))

    app.run_polling(close_loop=False)

if __name__ == '__main__':
    main()
